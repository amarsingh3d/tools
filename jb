#!/bin/bash
# VARS #
version=1.2.1
modified="22 January 2021"

mboxes=38 # Can edit the number of M boxes here
pkey="/auth/keys/master-vpc-keypair-us-east-1.pem" # Replace local pem key here

# NULL INPUT CAPTURE #
if [ -z $1 ]; then
   echo "Missing option - nothing to execute"
   echo "Usage: jb (range|start|stop|restart|list|version|help)"
   exit 1;
fi

# ABOUT #
if [ $1 == 'version' ]; then
   echo "============================================================="
   echo "jb version $version written and developed by Graham Trueman"
   echo "last modified: ${modified}"
   echo "============================================================="
   exit 1;
fi

# JBOSS RANGE
if [[ $1 == 'range' ]]; then
  echo "Current range set to $mboxes"
  echo "Change manually, and commit permanent range increases to the repository."
  exit 1;
fi

# JBOSS LOOP LIST #
if [[ $1 == 'list' ]]; then
	i=0
  if [[ $2 == 'monitor' ]]; then
    # Monitor specific commands
    >monitor.txt
    i="1"
     echo "Looking for monitor services..."
     while [ $i -lt $mboxes ]
     do
       i=$[$i+1]
       echo "m$i" >> monitor.txt
       ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'ls -la /jboss/standalone/deployments/*monitor*.ear 2> /dev/null' >>monitor.txt
     done
     # Tidy up file
     echo "m40" >> monitor.txt
     echo `cat monitor.txt` > monitor.txt
     cp monitor.txt monitor-results.txt
     for i in {1..5}; do sed -i -r 's/m[0-9]{1,2}\sm/m/g' monitor.txt; done
     sed -i 's/\([0-9]\)\s/\1\n/g' ./monitor.txt
     sed -i 's/\/jboss.*ear\s//g' ./monitor.txt
     cat monitor.txt | grep m | grep -v m40 > monitors.txt
     cat monitors.txt
     rm -f ./monitor*.txt
     exit 1;
  fi
  if [[ $2 == 'trawl' ]]; then
    # Trawl specific commands
    >trawl.txt
    i="1"
     echo "Looking for trawl services..."
     while [ $i -lt $mboxes ]
     do
       i=$[$i+1]
       echo "m$i" >> trawl.txt
       ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'ls -la /jboss/standalone/deployments/*trawl*.ear 2> /dev/null' >>trawl.txt
     done
     # Tidy up file
     echo "m40" >> trawl.txt
     echo `cat trawl.txt` > trawl.txt
     for i in {1..5}; do sed -i -r 's/m[0-9]{1,2}\sm/m/g' trawl.txt; done
     sed -i 's/\([0-9]\)\s/\1\n/g' ./trawl.txt
     sed -i 's/\/jboss.*ear\s//g' ./trawl.txt
     cat trawl.txt | grep m | grep -v m40 > trawlers.txt
     cat trawlers.txt
     rm -f ./trawl*.txt
     exit 1;
  fi
  if [[ $2 == 'harvest' ]]; then
    # Harvest specific commands
    >harvest.txt
    i="1"
     echo "Looking for harvest services..."
     while [ $i -lt $mboxes ]
     do
       i=$[$i+1]
       echo "m$i" >> harvest.txt
       ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'ls -la /jboss/standalone/deployments/*harvest*.ear 2> /dev/null' >>harvest.txt
     done
     # Tidy up file
     echo "m40" >> harvest.txt
     echo `cat harvest.txt` > harvest.txt
     for i in {1..5}; do sed -i -r 's/m[0-9]{1,2}\sm/m/g' harvest.txt; done
     sed -i 's/\([0-9]\)\s/\1\n/g' ./harvest.txt
     sed -i 's/\/jboss.*ear\s//g' ./harvest.txt
     cat harvest.txt | grep m | grep -v m40 > harvesters.txt
     cat harvesters.txt
     rm -f ./harvest*.txt
     exit 1;
  fi
  if [[ -z $2 ]]; then
    i=0
  fi
  if [[ $2 -ge $i ]]; then
    i=$[$2-1]
  fi
  # to
  if [[ -z $3 ]]; then
    echo "Running to end"
  fi
  if [[ $3 -ge $mboxes ]]; then
    echo "invalid selection"
  fi
  if [[ $3 -le $2 ]]; then
    echo "from is greater than to.."
  fi
  if [[ $3 -gt $2 ]] && [[ $3 -le $mboxes ]]; then
    echo "Lowering endpoint value"
    mboxes=$3
  fi
  if [[ $i -lt 0 ]]; then
    i=0
  fi
  # Main loop
	echo "Listing jboss backend service state from $[$i+1] to $mboxes"
  while [ $i -lt $mboxes ]
	do
		i=$[$i+1]
		echo ""
    echo "============"
    echo "Checking m$i"
    echo "============"
    ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'ls -ld /jboss/standalone/deployments/*.*ed' | awk '{print $9}'
	done
	echo "Front end servers and API's"
	for i in {1..5}; do
    echo ""
    echo "==========="
    echo "Checking c$i"
    echo "==========="
    ssh -o StrictHostKeyChecking=no -i $pkey root@c$i.jam.maguscloud.com 'ls -ld /jboss/standalone/deployments/*.*ed' | awk '{print $9}'
  done
fi

# JBOSS STOP
if [ $1 == 'stop' ]; then
  i="1"
	 echo "Stopping all jboss backend services (not M1)"
   while [ $i -lt $mboxes ]
   do
     i=$[$i+1]
     echo ""
     echo "============"
     echo "Stopping m$i"
     echo "============"
     ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'service jboss stop'
   done
fi

# JBOSS START
if [ $1 == 'start' ]; then
  i="1"
   echo "Start jboss on all backend servers (not M1)"
   while [ $i -lt $mboxes ]
   do
     i=$[$i+1]
     echo ""
     echo "============"
     echo "Starting m$i"
     echo "============"
     ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'service jboss start'
   done
fi

# JBOSS SCRIPT
if [ $1 == 'script' ]; then
  i="1"
    echo "Usage: jb (start|stop)"
    echo "for i in {2..$mboxes}; do"
    echo 'ssh -i /auth/DQM-key.pem root@m$i.jam.maguscloud.com `service jboss (start|stop)`'
    echo "done"
	#for i in {2..38}; do ssh -i /mnt/magus/auth/CrownpeakDQM.pem root@in.m$i 'echo "Stopping jboss service on m'$i'"; service jboss stop' ; done
fi


# JBOSS RESTART
if [ $1 == 'restart' ]; then
  if [ -z $2 ]; then
       i="1"
       echo "Restarting jboss on all backend servers (not M1)"
       while [ $i -lt $mboxes ]
       do
         i=$[$i+1]
         echo ""
         echo "============"
         echo "Starting m$i"
         echo "============"
         ssh -o StrictHostKeyChecking=no -i $pkey root@$i.jam.maguscloud.com 'service jboss stop'
         ssh -o StrictHostKeyChecking=no -i $pkey root@$i.jam.maguscloud.com 'service jboss start'
       done
       exit 1;
  fi
  if [ $2 == 'monitor' ]; then
    echo "Restarting all MONITOR boxes"
    >monitor.txt
    i="1"
     echo "Looking for monitor services..."
     while [ $i -lt $mboxes ]
     do
       i=$[$i+1]
       echo "m$i" >> monitor.txt
       ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'ls -la /jboss/standalone/deployments/*monitor*.ear 2> /dev/null' >>monitor.txt
     done
     # Tidy up file
     echo "m40" >> monitor.txt
     echo `cat monitor.txt` > monitor.txt
     cp monitor.txt monitor-results.txt
     for i in {1..5}; do sed -i -r 's/m[0-9]{1,2}\sm/m/g' monitor.txt; done
     sed -i 's/\([0-9]\)\s/\1\n/g' ./monitor.txt
     sed -i 's/\/jboss.*ear\s//g' ./monitor.txt
     cat monitor.txt | grep m | grep -v m40 > monitors.txt
     lines=$(cat monitors.txt)
     for i in $lines; do
       ssh -o StrictHostKeyChecking=no -i $pkey root@$i.jam.maguscloud.com 'service jboss stop'
       ssh -o StrictHostKeyChecking=no -i $pkey root@$i.jam.maguscloud.com 'service jboss start'
       echo "Restarted jboss on $i"
     done
     rm monitor*.txt
     exit 1;
  fi
  if [ $2 == 'trawl' ]; then
    echo "Restarting all TRAWL boxes"
    >monitor.txt
    i="1"
     echo "Looking for trawl services..."
     while [ $i -lt $mboxes ]
     do
       i=$[$i+1]
       echo "m$i" >> trawl.txt
       ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'ls -la /jboss/standalone/deployments/*trawl*.ear 2> /dev/null' >>trawl.txt
     done
     # Tidy up file
     echo "m40" >> trawl.txt
     echo `cat trawl.txt` > trawl.txt
     for i in {1..5}; do sed -i -r 's/m[0-9]{1,2}\sm/m/g' trawl.txt; done
     sed -i 's/\([0-9]\)\s/\1\n/g' ./trawl.txt
     sed -i 's/\/jboss.*ear\s//g' ./trawl.txt
     cat trawl.txt | grep m | grep -v m40 > trawlers.txt
     lines=$(cat trawlers.txt)
     for i in $lines; do
       ssh -o StrictHostKeyChecking=no -i $pkey root@$i.jam.maguscloud.com 'service jboss stop'
       ssh -o StrictHostKeyChecking=no -i $pkey root@$i.jam.maguscloud.com 'service jboss start'
       echo "Restarted jboss on $i"
     done
     rm trawl*.txt
     exit 1;
  fi
  echo "Invalid option $2"
fi

# JBOSS SSH RESET
if [[ $1 == 'reset' ]] && [[ $2 == 'keys' ]]; then
  echo "Resetting all ssh keys"
  cd ~/.ssh
  dir=`pwd`
  cd -
  i=0
  while [ $i -lt $mboxes ]
    do
      i=$[$i+1]
      echo ""
      echo "============"
      echo "Checking m$i"
      echo "============"
      ssh-keygen -f "$dir/known_hosts" -R "m$i.jam.maguscloud.com"
    done
  exit 1;
fi

# JBOSS UPTIME
if [[ $1 == 'uptime' ]]; then
  i="0"
	 echo "Checking uptime of all jboss server instances"
   while [ $i -lt $mboxes ]
   do
     i=$[$i+1]
     echo ""
     echo "============"
     echo "Checking m$i"
     echo "============"
     ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'w | grep up' | awk {'print $3" "$4" "$5'}
   done
   for i in {1..5}; do
      echo ""
      echo "==========="
      echo "Checking c$i"
      echo "==========="
      ssh -o StrictHostKeyChecking=no -i $pkey root@c$i.jam.maguscloud.com 'w | grep up' | awk {'print $3" "$4" "$5'}
    done
fi

# JBOSS UPTIME
if [[ $1 == 'load' ]]; then
  i="0"
	 echo "Checking average load on all jboss server instances"
   while [ $i -lt $mboxes ]
   do
     i=$[$i+1]
     echo ""
     echo "============"
     echo "Checking m$i"
     echo "============"
     ssh -o StrictHostKeyChecking=no -i $pkey root@m$i.jam.maguscloud.com 'uptime' | grep up | awk {'print $8" "$9" "$10" "$11" "$12'}
   done
   for i in {1..5}; do
      echo ""
      echo "==========="
      echo "Checking c$i"
      echo "==========="
      ssh -o StrictHostKeyChecking=no -i $pkey root@c$i.jam.maguscloud.com 'uptime' | grep up | awk {'print $8" "$9" "$10" "$11" "$12'}
    done
fi

# JBOSS HELP
if [ $1 == 'help' ]; then
	clear
	echo "JBOSS service script v $version"
	echo "============================"
	echo ""
	echo "Options are:"
	echo "jb stop    - Stop jboss on all M servers, but not M1"
	echo "jb start   - Start jboss on all M servers, but not M1"
	echo "jb list    - List all deployed versions for selected range. Defaults is to display all servers"
  echo "           - options to list harvest, trawl or monitor services (server list for each service)"
	echo "jb restart - Stops and restarts all jboss services from M2 to the end."
	echo "jb version - Displays the version of the current script that you have installed."
	echo "jb help    - Displays this help page."
	echo "jb script  - Displays script execution details"
  echo "jb range   - Displays the parameter range that has bee set"
  echo "jb uptime  - Displays the uptime since last server start-up"
	echo "jb         - any other value ignored."
fi


exit;
